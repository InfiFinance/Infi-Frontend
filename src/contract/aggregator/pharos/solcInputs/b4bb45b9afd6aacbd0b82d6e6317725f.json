{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3Adapter.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./UniswapV3AdapterBase.sol\";    \n\ncontract UniswapV3Adapter is UniswapV3AdapterBase {\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3AdapterBase(_name, _swapGasEstimate, _quoterGasLimit, _quoter, _factory, _defaultFees) {\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3AdapterBase.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./UniswapV3likeAdapter.sol\";\n\ninterface IUniV3Factory {\n    function feeAmountTickSpacing(uint24) external view returns (int24);\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address);\n}\n\ncontract UniswapV3AdapterBase is UniswapV3likeAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable FACTORY;\n    mapping(uint24 => bool) public isFeeAmountEnabled;\n    uint24[] public feeAmounts;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        uint256 _quoterGasLimit,\n        address _quoter,\n        address _factory,\n        uint24[] memory _defaultFees\n    ) UniswapV3likeAdapter(_name, _swapGasEstimate, _quoter, _quoterGasLimit) {\n        FACTORY = _factory;\n        for (uint i = 0; i < _defaultFees.length; i++) {\n            addFeeAmount(_defaultFees[i]);\n        }\n    }\n\n    function enableFeeAmounts(uint24[] calldata _amounts) external onlyMaintainer {\n        for (uint256 i; i < _amounts.length; ++i) enableFeeAmount(_amounts[i]);\n    }\n\n    function enableFeeAmount(uint24 _fee) internal {\n        require(!isFeeAmountEnabled[_fee], \"Fee already enabled\");\n        if (IUniV3Factory(FACTORY).feeAmountTickSpacing(_fee) == 0)\n            revert(\"Factory doesn't support fee\");\n        addFeeAmount(_fee);\n    }\n\n    function addFeeAmount(uint24 _fee) internal {\n        isFeeAmountEnabled[_fee] = true;\n        feeAmounts.push(_fee);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view virtual override returns (address mostLiquid) {\n        uint128 deepestLiquidity;\n        for (uint256 i; i < feeAmounts.length; ++i) {\n            address pool = IUniV3Factory(FACTORY).getPool(token0, token1, feeAmounts[i]);\n            if (pool == address(0))\n                continue;\n            uint128 liquidity = IUniV3Pool(pool).liquidity();\n            if (liquidity > deepestLiquidity) {\n                deepestLiquidity = liquidity;\n                mostLiquid = pool;\n            }\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3likeAdapter.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../InfiAdapter.sol\";\n\nstruct QParams {\n    address tokenIn;\n    address tokenOut;\n    int256 amountIn;\n    uint24 fee;\n}\n\ninterface IUniV3Pool {\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function liquidity() external view returns (uint128);\n}\n\ninterface IUniV3Quoter {\n    function quoteExactInputSingle(\n        QParams memory params\n    ) external view returns (uint256);\n\n    function quote(\n        address,\n        bool,\n        int256,\n        uint160\n    ) external view returns (int256, int256);\n}\n\nabstract contract UniswapV3likeAdapter is InfiAdapter {\n    using SafeERC20 for IERC20;\n\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    uint256 public quoterGasLimit;\n    address public quoter;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _quoter,\n        uint256 _quoterGasLimit\n    ) InfiAdapter(_name, _swapGasEstimate) {\n        setQuoterGasLimit(_quoterGasLimit);\n        setQuoter(_quoter);\n    }\n\n    function setQuoter(address newQuoter) public onlyMaintainer {\n        quoter = newQuoter;\n    }\n\n    function setQuoterGasLimit(uint256 newLimit) public onlyMaintainer {\n        require(newLimit != 0, \"queryGasLimit can't be zero\");\n        quoterGasLimit = newLimit;\n    }\n\n    function getQuoteForPool(\n        address pool,\n        int256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256) {\n        QParams memory params;\n        params.amountIn = amountIn;\n        params.tokenIn = tokenIn;\n        params.tokenOut = tokenOut;\n        return getQuoteForPool(pool, params);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 quote) {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        quote = getQuoteForBestPool(params);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        uint256 amountOut = _underlyingSwap(params, new bytes(0));\n        require(amountOut >= _amountOut, \"Insufficient amountOut\");\n        _returnTo(_tokenOut, amountOut, _to);\n    }\n\n    function getQParams(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) internal pure returns (QParams memory params) {\n        params = QParams({ \n            amountIn: int256(amountIn), \n            tokenIn: tokenIn, \n            tokenOut: tokenOut, \n            fee: 0 \n        });\n    }\n\n    function _underlyingSwap(\n        QParams memory params, \n        bytes memory callbackData\n    ) internal virtual returns (uint256) {\n        address pool = getBestPool(params.tokenIn, params.tokenOut);\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\n            params.tokenIn, \n            params.tokenOut\n        );\n        (int256 amount0, int256 amount1) = IUniV3Pool(pool).swap(\n            address(this),\n            zeroForOne,\n            int256(params.amountIn),\n            priceLimit,\n            callbackData\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getQuoteForBestPool(\n        QParams memory params\n    ) internal view returns (uint256 quote) {\n        address bestPool = getBestPool(params.tokenIn, params.tokenOut);\n        if (bestPool != address(0)) quote = getQuoteForPool(bestPool, params);\n    }\n\n    function getBestPool(\n        address token0, \n        address token1\n    ) internal view virtual returns (address mostLiquid);\n    \n    function getQuoteForPool(\n        address pool, \n        QParams memory params\n    ) internal view returns (uint256) {\n        (bool zeroForOne, uint160 priceLimit) = getZeroOneAndSqrtPriceLimitX96(\n            params.tokenIn, \n            params.tokenOut\n        );\n        (int256 amount0, int256 amount1) = getQuoteSafe(\n            pool,\n            zeroForOne,\n            params.amountIn,\n            priceLimit\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getQuoteSafe(\n        address pool, \n        bool zeroForOne,\n        int256 amountIn,\n        uint160 priceLimit\n    ) internal view returns (int256 amount0, int256 amount1) {\n        bytes memory calldata_ = abi.encodeWithSignature(\n            \"quote(address,bool,int256,uint160)\",\n            pool,\n            zeroForOne,\n            amountIn,\n            priceLimit\n        );\n        (bool success, bytes memory data) = staticCallQuoterRaw(calldata_);\n        if (success)\n            (amount0, amount1) = abi.decode(data, (int256, int256));\n    }\n\n    function staticCallQuoterRaw(\n        bytes memory calldata_\n    ) internal view returns (bool success, bytes memory data) {\n        (success, data) = quoter.staticcall{gas: quoterGasLimit}(calldata_);\n    }\n\n    function getZeroOneAndSqrtPriceLimitX96(address tokenIn, address tokenOut)\n        internal\n        pure\n        returns (bool zeroForOne, uint160 sqrtPriceLimitX96)\n    {\n        zeroForOne = tokenIn < tokenOut;\n        sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO+1 : MAX_SQRT_RATIO-1;\n    }\n}\n"
    },
    "src/contracts/InfiAdapter.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Maintainable.sol\";\n\nabstract contract InfiAdapter is Maintainable {\n    using SafeERC20 for IERC20;\n\n    event InfiAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\n    event Recovered(address indexed _asset, uint256 amount);\n\n    uint256 internal constant UINT_MAX = type(uint256).max;\n    uint256 public swapGasEstimate;\n    string public name;\n\n    constructor(string memory _name, uint256 _gasEstimate) {\n        setName(_name);\n        setSwapGasEstimate(_gasEstimate);\n    }\n\n    function setName(string memory _name) internal {\n        require(bytes(_name).length != 0, \"Invalid adapter name\");\n        name = _name;\n    }\n\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\n        require(_estimate != 0, \"Invalid gas-estimate\");\n        swapGasEstimate = _estimate;\n        emit UpdatedGasEstimate(address(this), _estimate);\n    }\n\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\n        IERC20(_token).safeApprove(_spender, 0);\n    }\n\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\n        require(_tokenAmount > 0, \"InfiAdapter: Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n\n    function query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) external view returns (uint256) {\n        return _query(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) external virtual {\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\n        require(diff >= _amountOut, \"Insufficient amount-out\");\n        emit InfiAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\n    }\n\n    function _returnTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) internal virtual;\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view virtual returns (uint256);\n\n    receive() external payable {}\n}\n"
    },
    "src/contracts/InfiRouter.sol": {
      "content": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./interface/IInfiRouter.sol\";\nimport \"./interface/IAdapter.sol\";\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Maintainable.sol\";\nimport \"./lib/InfiViewUtils.sol\";\nimport \"./lib/Recoverable.sol\";\nimport \"./lib/SafeERC20.sol\";\n\n\ncontract InfiRouter is Maintainable, Recoverable, IInfiRouter {\n    using SafeERC20 for IERC20;\n    using OfferUtils for Offer;\n\n    address public immutable WNATIVE;\n    address public constant NATIVE = address(0);\n    string public constant NAME = \"InfiRouter\";\n    uint256 public constant FEE_DENOMINATOR = 1e4;\n    uint256 public MIN_FEE = 0;\n    address public FEE_CLAIMER;\n    address[] public TRUSTED_TOKENS;\n    address[] public ADAPTERS;\n\n    constructor(\n        address[] memory _adapters,\n        address[] memory _trustedTokens,\n        address _feeClaimer,\n        address _wrapped_native\n    ) {\n        setAllowanceForWrapping(_wrapped_native);\n        setTrustedTokens(_trustedTokens);\n        setFeeClaimer(_feeClaimer);\n        setAdapters(_adapters);\n        WNATIVE = _wrapped_native;\n    }\n\n    // -- SETTERS --\n\n    function setAllowanceForWrapping(address _wnative) public onlyMaintainer {\n        IERC20(_wnative).safeApprove(_wnative, type(uint256).max);\n    }\n\n    function setTrustedTokens(address[] memory _trustedTokens) override public onlyMaintainer {\n        emit UpdatedTrustedTokens(_trustedTokens);\n        TRUSTED_TOKENS = _trustedTokens;\n    }\n\n    function setAdapters(address[] memory _adapters) override public onlyMaintainer {\n        emit UpdatedAdapters(_adapters);\n        ADAPTERS = _adapters;\n    }\n\n    function setMinFee(uint256 _fee) override external onlyMaintainer {\n        emit UpdatedMinFee(MIN_FEE, _fee);\n        MIN_FEE = _fee;\n    }\n\n    function setFeeClaimer(address _claimer) override public onlyMaintainer {\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\n        FEE_CLAIMER = _claimer;\n    }\n\n    //  -- GENERAL --\n\n    function trustedTokensCount() override external view returns (uint256) {\n        return TRUSTED_TOKENS.length;\n    }\n\n    function adaptersCount() override external view returns (uint256) {\n        return ADAPTERS.length;\n    }\n\n    // Fallback\n    receive() external payable {}\n\n    // -- HELPERS --\n\n    function _applyFee(uint256 _amountIn, uint256 _fee) internal view returns (uint256) {\n        require(_fee >= MIN_FEE, \"InfiRouter: Insufficient fee\");\n        return (_amountIn * (FEE_DENOMINATOR - _fee)) / FEE_DENOMINATOR;\n    }\n\n    function _wrap(uint256 _amount) internal {\n        IWETH(WNATIVE).deposit{ value: _amount }();\n    }\n\n    function _unwrap(uint256 _amount) internal {\n        IWETH(WNATIVE).withdraw(_amount);\n    }\n\n    /**\n     * @notice Return tokens to user\n     * @param _token address\n     * @param _amount tokens to return\n     * @param _to address where funds should be sent to\n     */\n    function _returnTokensTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) {\n            if (_token == NATIVE) {\n                payable(_to).transfer(_amount);\n            } else {\n                IERC20(_token).safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function _transferFrom(address token, address _from, address _to, uint _amount) internal {\n        if (_from != address(this))\n            IERC20(token).safeTransferFrom(_from, _to, _amount);\n        else\n            IERC20(token).safeTransfer(_to, _amount);\n    }\n    \n    // -- QUERIES --\n\n    /**\n     * Query single adapter\n     */\n    function queryAdapter(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8 _index\n    ) override external view returns (uint256) {\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\n        uint256 amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\n        return amountOut;\n    }\n\n    /**\n     * Query specified adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8[] calldata _options\n    ) override public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < _options.length; i++) {\n            address _adapter = ADAPTERS[_options[i]];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Query all adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) override public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < ADAPTERS.length; i++) {\n            address _adapter = ADAPTERS[i];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     * Takes gas-cost into account\n     */\n    function findBestPathWithGas(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        uint256 _gasPrice\n    ) override external view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"InfiRouter: Invalid max-steps\");\n        Offer memory queries = OfferUtils.newOffer(_amountIn, _tokenIn);\n        uint256 gasPriceInExitTkn = _gasPrice > 0 ? getGasPriceInExitTkn(_gasPrice, _tokenOut) : 0;\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, gasPriceInExitTkn);\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return queries.format();\n    }\n\n    // Find the market price between gas-asset(native) and token-out and express gas price in token-out\n    function getGasPriceInExitTkn(uint256 _gasPrice, address _tokenOut) internal view returns (uint256 price) {\n        FormattedOffer memory gasQuery = findBestPath(1e18, WNATIVE, _tokenOut, 2);\n        if (gasQuery.path.length != 0) {\n            // Leave result in nWei to preserve precision for assets with low decimal places\n            price = (gasQuery.amounts[gasQuery.amounts.length - 1] * _gasPrice) / 1e9;\n        }\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     */\n    function findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps\n    ) override public view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"InfiRouter: Invalid max-steps\");\n        Offer memory queries = OfferUtils.newOffer(_amountIn, _tokenIn);\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, 0);\n        // If no paths are found return empty struct\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return queries.format();\n    }\n\n    function _findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        Offer memory _queries,\n        uint256 _tknOutPriceNwei\n    ) internal view returns (Offer memory) {\n        Offer memory bestOption = _queries.clone();\n        uint256 bestAmountOut;\n        uint256 gasEstimate;\n        bool withGas = _tknOutPriceNwei != 0;\n\n        // First check if there is a path directly from tokenIn to tokenOut\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\n\n        if (queryDirect.amountOut != 0) {\n            if (withGas) {\n                gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\n            }\n            bestOption.addToTail(queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut, gasEstimate);\n            bestAmountOut = queryDirect.amountOut;\n        }\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\n        if (_maxSteps > 1 && _queries.adapters.length / 32 <= _maxSteps - 2) {\n            // Check for paths that pass through trusted tokens\n            for (uint256 i = 0; i < TRUSTED_TOKENS.length; i++) {\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\n                    continue;\n                }\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\n                if (bestSwap.amountOut == 0) {\n                    continue;\n                }\n                // Explore options that connect the current path to the tokenOut\n                Offer memory newOffer = _queries.clone();\n                if (withGas) {\n                    gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\n                }\n                newOffer.addToTail(bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\n                newOffer = _findBestPath(\n                    bestSwap.amountOut,\n                    TRUSTED_TOKENS[i],\n                    _tokenOut,\n                    _maxSteps,\n                    newOffer,\n                    _tknOutPriceNwei\n                ); // Recursive step\n                address tokenOut = newOffer.getTokenOut();\n                uint256 amountOut = newOffer.getAmountOut();\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\n                        uint256 gasCostDiff = (_tknOutPriceNwei * (newOffer.gasEstimate - bestOption.gasEstimate)) /\n                            1e9;\n                        uint256 priceDiff = amountOut - bestAmountOut;\n                        if (gasCostDiff > priceDiff) {\n                            continue;\n                        }\n                    }\n                    bestAmountOut = amountOut;\n                    bestOption = newOffer;\n                }\n            }\n        }\n        return bestOption;\n    }\n\n    // -- SWAPPERS --\n\n    function _swapNoSplit(\n        Trade calldata _trade,\n        address _from,\n        address _to,\n        uint256 _fee\n    ) internal returns (uint256) {\n        uint256[] memory amounts = new uint256[](_trade.path.length);\n        if (_fee > 0 || MIN_FEE > 0) {\n            // Transfer fees to the claimer account and decrease initial amount\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\n            _transferFrom(_trade.path[0], _from, FEE_CLAIMER, _trade.amountIn - amounts[0]);\n        } else {\n            amounts[0] = _trade.amountIn;\n        }\n        _transferFrom(_trade.path[0], _from, _trade.adapters[0], amounts[0]);\n        // Get amounts that will be swapped\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            amounts[i + 1] = IAdapter(_trade.adapters[i]).query(amounts[i], _trade.path[i], _trade.path[i + 1]);\n        }\n        require(amounts[amounts.length - 1] >= _trade.amountOut, \"InfiRouter: Insufficient output amount\");\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            // All adapters should transfer output token to the following target\n            // All targets are the adapters, expect for the last swap where tokens are sent out\n            address targetAddress = i < _trade.adapters.length - 1 ? _trade.adapters[i + 1] : _to;\n            IAdapter(_trade.adapters[i]).swap(\n                amounts[i],\n                amounts[i + 1],\n                _trade.path[i],\n                _trade.path[i + 1],\n                targetAddress\n            );\n        }\n        emit InfiSwap(_trade.path[0], _trade.path[_trade.path.length - 1], _trade.amountIn, amounts[amounts.length - 1]);\n        return amounts[amounts.length - 1];\n    }\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) override public {\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\n    }\n\n\n    /**\n     * Swap token to token without the need to approve the first token\n     */\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) override external {\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\n        swapNoSplit(_trade, _to, _fee);\n    }\n}\n"
    },
    "src/contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAdapter {\n    function name() external view returns (string memory);\n\n    function swapGasEstimate() external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        address,\n        address\n    ) external;\n\n    function query(\n        uint256,\n        address,\n        address\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address, address, uint256);\n    event Transfer(address, address, uint256);\n\n    function name() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external; // Only tokens that support permit\n\n    function swap(address, uint256) external;\n\n    function swapSupply(address) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IInfiRouter.sol": {
      "content": "pragma solidity ^0.8.0;\n\n\nstruct Query {\n    address adapter;\n    address tokenIn;\n    address tokenOut;\n    uint256 amountOut;\n}\nstruct Offer {\n    bytes amounts;\n    bytes adapters;\n    bytes path;\n    uint256 gasEstimate;\n}\nstruct FormattedOffer {\n    uint256[] amounts;\n    address[] adapters;\n    address[] path;\n    uint256 gasEstimate;\n}\nstruct Trade {\n    uint256 amountIn;\n    uint256 amountOut;\n    address[] path;\n    address[] adapters;\n}\n\ninterface IInfiRouter {\n\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\n    event UpdatedAdapters(address[] _newAdapters);\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\n    event InfiSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\n\n    // admin\n    function setTrustedTokens(address[] memory _trustedTokens) external;\n    function setAdapters(address[] memory _adapters) external;\n    function setFeeClaimer(address _claimer) external;\n    function setMinFee(uint256 _fee) external;\n\n    // misc\n    function trustedTokensCount() external view returns (uint256);\n    function adaptersCount() external view returns (uint256);\n\n    // query\n\n    function queryAdapter(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8 _index\n    ) external returns (uint256);\n\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8[] calldata _options\n    ) external view returns (Query memory);\n\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) external view returns (Query memory);\n\n    function findBestPathWithGas(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        uint256 _gasPrice\n    ) external view returns (FormattedOffer memory);\n\n    function findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps\n    ) external view returns (FormattedOffer memory);\n\n    // swap\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external;\n\n\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external;\n\n}"
    },
    "src/contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n\n    function deposit() external payable;\n}\n"
    },
    "src/contracts/lib/InfiViewUtils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.4;\n\nimport { Offer, FormattedOffer } from \"../interface/IInfiRouter.sol\";\nimport \"./TypeConversion.sol\";\n\n\nlibrary OfferUtils {\n    using TypeConversion for address;\n    using TypeConversion for uint256;\n    using TypeConversion for bytes;\n\n    function newOffer(\n        uint _amountIn,\n        address _tokenIn\n    ) internal pure returns (Offer memory offer) {\n        offer.amounts = _amountIn.toBytes();\n        offer.path = _tokenIn.toBytes();\n    }\n\n    /**\n     * Makes a deep copy of Offer struct\n     */\n    function clone(Offer memory _queries) internal pure returns (Offer memory) {\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\n    }\n\n    /**\n     * Appends new elements to the end of Offer struct\n     */\n    function addToTail(\n        Offer memory _queries,\n        uint256 _amount,\n        address _adapter,\n        address _tokenOut,\n        uint256 _gasEstimate\n    ) internal pure {\n        _queries.path = bytes.concat(_queries.path, _tokenOut.toBytes());\n        _queries.adapters = bytes.concat(_queries.adapters, _adapter.toBytes());\n        _queries.amounts = bytes.concat(_queries.amounts, _amount.toBytes());\n        _queries.gasEstimate += _gasEstimate;\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function format(Offer memory _queries) internal pure returns (FormattedOffer memory) {\n        return\n            FormattedOffer(\n                _queries.amounts.toUints(),\n                _queries.adapters.toAddresses(),\n                _queries.path.toAddresses(),\n                _queries.gasEstimate\n            );\n    }\n\n    function getTokenOut(\n        Offer memory _offer\n    ) internal pure returns (address tokenOut) {\n        tokenOut = _offer.path.toAddress(_offer.path.length);  // Last 32 bytes\n    }\n\n    function getAmountOut(\n        Offer memory _offer\n    ) internal pure returns (uint amountOut) {\n        amountOut = _offer.amounts.toUint(_offer.path.length);  // Last 32 bytes\n    }\n\n}\n\nlibrary FormattedOfferUtils {\n    using TypeConversion for address;\n    using TypeConversion for uint256;\n    using TypeConversion for bytes;\n\n    /**\n     * Appends new elements to the end of FormattedOffer\n     */\n    function addToTail(\n        FormattedOffer memory offer, \n        uint256 amountOut, \n        address wrapper,\n        address tokenOut,\n        uint256 gasEstimate\n    ) internal pure {\n        offer.amounts = bytes.concat(abi.encodePacked(offer.amounts), amountOut.toBytes()).toUints();\n        offer.adapters = bytes.concat(abi.encodePacked(offer.adapters), wrapper.toBytes()).toAddresses();\n        offer.path = bytes.concat(abi.encodePacked(offer.path), tokenOut.toBytes()).toAddresses();\n        offer.gasEstimate += gasEstimate;\n    }\n\n    /**\n     * Appends new elements to the beginning of FormattedOffer\n     */\n    function addToHead(\n        FormattedOffer memory offer, \n        uint256 amountOut, \n        address wrapper,\n        address tokenOut,\n        uint256 gasEstimate\n    ) internal pure {\n        offer.amounts = bytes.concat(amountOut.toBytes(), abi.encodePacked(offer.amounts)).toUints();\n        offer.adapters = bytes.concat(wrapper.toBytes(), abi.encodePacked(offer.adapters)).toAddresses();\n        offer.path = bytes.concat(tokenOut.toBytes(), abi.encodePacked(offer.path)).toAddresses();\n        offer.gasEstimate += gasEstimate;\n    }\n\n    function getAmountOut(FormattedOffer memory offer) internal pure returns (uint256) {\n        return offer.amounts[offer.amounts.length - 1];\n    }\n\n}"
    },
    "src/contracts/lib/Maintainable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which extends the basic access control mechanism of Ownable\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\n * remove.\n *\n * By default, the owner account will be the one that deploys the contract. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available this modifier:\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\n * the accounts with the role of maintainer.\n */\n\nabstract contract Maintainable is Context, AccessControl {\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    constructor() {\n        address msgSender = _msgSender();\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\n        _setupRole(MAINTAINER_ROLE, msgSender);\n    }\n\n    function addMaintainer(address addedMaintainer) public virtual {\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\n    }\n\n    function removeMaintainer(address removedMaintainer) public virtual {\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\n    }\n\n    function renounceRole(bytes32 role) public virtual {\n        address msgSender = _msgSender();\n        renounceRole(role, msgSender);\n    }\n\n    function transferOwnership(address newOwner) public virtual {\n        address msgSender = _msgSender();\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\n    }\n\n    modifier onlyMaintainer() {\n        address msgSender = _msgSender();\n        require(hasRole(MAINTAINER_ROLE, msgSender), \"Maintainable: Caller is not a maintainer\");\n        _;\n    }\n}\n"
    },
    "src/contracts/lib/Recoverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./Maintainable.sol\";\n\n\nabstract contract Recoverable is Maintainable {\n    using SafeERC20 for IERC20;\n\n    event Recovered(\n        address indexed _asset, \n        uint amount\n    );\n\n    /**\n     * @notice Recover ERC20 from contract\n     * @param _tokenAddress token address\n     * @param _tokenAmount amount to recover\n     */\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyMaintainer {\n        require(_tokenAmount > 0, \"Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    /**\n     * @notice Recover native asset from contract\n     * @param _amount amount\n     */\n    function recoverNative(uint _amount) external onlyMaintainer {\n        require(_amount > 0, \"Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n}"
    },
    "src/contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/contracts/lib/TypeConversion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n\nlibrary TypeConversion {\n\n    function toBytes12(address x) internal pure returns (bytes12 y) {\n        assembly { y := x }\n    }\n\n    function toBytes32(address x) internal pure returns (bytes32 y) {\n        assembly { y := x }\n    }\n\n    function toAddress(bytes32 x) internal pure returns (address y) {\n        assembly { y := x }\n    }\n\n    function toBytes(address x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toBytes(bytes32 x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toBytes(uint x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toAddress(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (address y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toUint(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (uint y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toBytes12(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (bytes12 y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toBytes32(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (bytes32 y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toAddresses(\n        bytes memory xs\n    ) internal pure returns (address[] memory ys) {\n        ys = new address[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toAddress(xs, i*32 + 32);\n        }\n    }\n\n    function toUints(\n        bytes memory xs\n    ) internal pure returns (uint[] memory ys) {\n        ys = new uint[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toUint(xs, i*32 + 32);\n        }\n    }\n\n    function toBytes32s(\n        bytes memory xs\n    ) internal pure returns (bytes32[] memory ys) {\n        ys = new bytes32[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toBytes32(xs, i*32 + 32);\n        }\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}